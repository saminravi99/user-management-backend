{
    "info": {
        "_postman_id": "user-management-api-2025",
        "name": "User Management API",
        "description": "Complete API collection for User Management Backend with Authentication, OTP, and User endpoints",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "user-management"
    },
    "item": [
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Signup",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store email for later use",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('signup_email', pm.request.body.raw ? JSON.parse(pm.request.body.raw).email : '');",
                                    "    console.log('✅ Signup successful! Check email for OTP');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"contactNumber\": \"1234567890\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/signup",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "signup"
                            ]
                        },
                        "description": "Register a new user account. Role is automatically set to 'user'. An OTP will be sent to the email address for verification.\n\n**Required fields:**\n- name: User's full name (min 2 characters)\n- email: Valid email address\n- password: Strong password (min 8 characters)\n- contactNumber: Phone number (10-15 digits)\n\n**Note:** Role is NOT accepted from body - always set to 'user'"
                    },
                    "response": []
                },
                {
                    "name": "Verify OTP",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store tokens automatically",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.data && response.data.tokens) {",
                                    "        pm.environment.set('accessToken', response.data.tokens.accessToken);",
                                    "        pm.environment.set('refreshToken', response.data.tokens.refreshToken);",
                                    "        console.log('✅ OTP verified! Tokens saved to environment');",
                                    "    }",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{signup_email}}\",\n  \"otp\": \"123456\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/verify-otp",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "verify-otp"
                            ]
                        },
                        "description": "Verify the OTP sent to email after signup. Returns access and refresh tokens upon successful verification.\n\n**Required fields:**\n- email: Email address used during signup\n- otp: 6-digit OTP code received via email"
                    },
                    "response": []
                },
                {
                    "name": "Login",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Store tokens automatically",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.data && response.data.tokens) {",
                                    "        pm.environment.set('accessToken', response.data.tokens.accessToken);",
                                    "        pm.environment.set('refreshToken', response.data.tokens.refreshToken);",
                                    "        pm.environment.set('userId', response.data.user._id);",
                                    "        console.log('✅ Login successful! Tokens saved to environment');",
                                    "    }",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        },
                        "description": "Login with email and password. Returns user data with access and refresh tokens.\n\n**Required fields:**\n- email: Registered email address\n- password: User's password\n\n**Note:** Account must be verified (OTP) before login."
                    },
                    "response": []
                },
                {
                    "name": "Refresh Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Update access token",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.data && response.data.tokens) {",
                                    "        pm.environment.set('accessToken', response.data.tokens.accessToken);",
                                    "        pm.environment.set('refreshToken', response.data.tokens.refreshToken);",
                                    "        console.log('✅ Token refreshed successfully!');",
                                    "    }",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/refresh-token",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "refresh-token"
                            ]
                        },
                        "description": "Get a new access token using the refresh token. Use this when the access token expires.\n\n**Required fields:**\n- refreshToken: Valid refresh token from login/signup"
                    },
                    "response": []
                },
                {
                    "name": "Logout",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Clear tokens on logout",
                                    "if (pm.response.code === 200) {",
                                    "    pm.environment.unset('accessToken');",
                                    "    pm.environment.unset('refreshToken');",
                                    "    pm.environment.unset('userId');",
                                    "    console.log('✅ Logged out successfully! Tokens cleared');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{accessToken}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/auth/logout",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "logout"
                            ]
                        },
                        "description": "Logout the current user. Requires authentication.\n\n**Authentication:** Bearer token required in Authorization header"
                    },
                    "response": []
                },
                {
                    "name": "Forgot Password",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('reset_email', pm.request.body.raw ? JSON.parse(pm.request.body.raw).email : '');",
                                    "    console.log('✅ Password reset OTP sent! Check email');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/forgot-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "forgot-password"
                            ]
                        },
                        "description": "Request a password reset OTP. An OTP will be sent to the email address.\n\n**Required fields:**\n- email: Registered email address"
                    },
                    "response": []
                },
                {
                    "name": "Reset Password",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{reset_email}}\",\n  \"otp\": \"123456\",\n  \"newPassword\": \"NewSecurePass123!\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/reset-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "reset-password"
                            ]
                        },
                        "description": "Reset password using the OTP received via email.\n\n**Required fields:**\n- email: Email address\n- otp: 6-digit OTP from email\n- newPassword: New strong password (min 8 characters)"
                    },
                    "response": []
                }
            ],
            "description": "Authentication endpoints for user registration, login, and password management"
        },
        {
            "name": "OTP",
            "item": [
                {
                    "name": "Resend OTP",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/resend-otp",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "resend-otp"
                            ]
                        },
                        "description": "Resend OTP to the email address if the previous OTP expired or was not received.\n\n**Required fields:**\n- email: Email address to resend OTP to\n\n**Note:** You can request a new OTP every 5 minutes"
                    },
                    "response": []
                },
                {
                    "name": "Verify OTP (Standalone)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"otp\": \"123456\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/verify-otp",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "verify-otp"
                            ]
                        },
                        "description": "Verify OTP for any purpose (signup verification, password reset, etc.)\n\n**Required fields:**\n- email: Email address\n- otp: 6-digit OTP code\n\n**OTP Details:**\n- Length: 6 digits\n- Expiry: 5 minutes (300 seconds)\n- Stored in Redis with automatic expiration"
                    },
                    "response": []
                }
            ],
            "description": "OTP management endpoints for verification and resending codes"
        },
        {
            "name": "Users",
            "item": [
                {
                    "name": "Profile Management",
                    "item": [
                        {
                            "name": "Get Own Profile",
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users/profile/me",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "profile",
                                        "me"
                                    ]
                                },
                                "description": "Get the currently authenticated user's profile.\n\n**Authentication:** Bearer token required\n**Role Required:** Any authenticated user"
                            },
                            "response": []
                        },
                        {
                            "name": "Update Own Profile",
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"name\": \"Updated Name\",\n  \"password\": \"NewSecurePass123!\",\n  \"contactNumber\": \"9876543210\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/profile/me",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "profile",
                                        "me"
                                    ]
                                },
                                "description": "Update your own profile. You can update name, password, and contactNumber.\n\n**Authentication:** Bearer token required\n**Role Required:** Any authenticated user\n\n**Allowed Updates:**\n- name: Your full name\n- password: New password (will be hashed)\n- contactNumber: Phone number\n\n**Cannot Update:**\n- email (requires OTP verification - use email change endpoints)\n- role (cannot change your own role)"
                            },
                            "response": []
                        },
                        {
                            "name": "Request Email Change",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Store new email for verification",
                                            "if (pm.response.code === 200) {",
                                            "    const body = JSON.parse(pm.request.body.raw);",
                                            "    pm.environment.set('new_email', body.newEmail);",
                                            "    console.log('✅ OTP sent to new email address');",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"newEmail\": \"newemail@example.com\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/profile/email/request",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "profile",
                                        "email",
                                        "request"
                                    ]
                                },
                                "description": "Request to change your email address. An OTP will be sent to the new email for verification.\n\n**Authentication:** Bearer token required\n**Role Required:** Any authenticated user\n\n**Required fields:**\n- newEmail: The new email address you want to use\n\n**Flow:**\n1. Request email change (this endpoint)\n2. Check new email for OTP\n3. Verify with OTP (next endpoint)"
                            },
                            "response": []
                        },
                        {
                            "name": "Verify Email Change",
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"newEmail\": \"{{new_email}}\",\n  \"otp\": \"123456\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/profile/email/verify",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "profile",
                                        "email",
                                        "verify"
                                    ]
                                },
                                "description": "Verify email change with the OTP sent to the new email address.\n\n**Authentication:** Bearer token required\n**Role Required:** Any authenticated user\n\n**Required fields:**\n- newEmail: The new email address (must match the request)\n- otp: 6-digit OTP code from email\n\n**Note:** After verification, your email will be updated and marked as verified"
                            },
                            "response": []
                        }
                    ],
                    "description": "Endpoints for managing your own profile"
                },
                {
                    "name": "User Management (Admin)",
                    "item": [
                        {
                            "name": "Get All Users",
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users"
                                    ]
                                },
                                "description": "Get a list of all users. Admin or SuperAdmin access required.\n\n**Authentication:** Bearer token required\n**Role Required:** Admin or SuperAdmin"
                            },
                            "response": []
                        },
                        {
                            "name": "Get User By ID",
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users/{{userId}}",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "{{userId}}"
                                    ]
                                },
                                "description": "Get a specific user by their ID. Admin or SuperAdmin access required.\n\n**Authentication:** Bearer token required\n**Role Required:** Admin or SuperAdmin\n\n**URL Parameters:**\n- userId: MongoDB ObjectId of the user"
                            },
                            "response": []
                        },
                        {
                            "name": "Update User (Admin)",
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"name\": \"Updated Name\",\n  \"contactNumber\": \"9876543210\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/{{userId}}",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "{{userId}}"
                                    ]
                                },
                                "description": "Update another user's basic information. Admin or SuperAdmin access required.\n\n**Authentication:** Bearer token required\n**Role Required:** Admin or SuperAdmin\n\n**Allowed Updates:**\n- name: User's full name\n- contactNumber: Phone number\n\n**Cannot Update via this endpoint:**\n- email\n- password\n- role (use role change endpoint)\n\n**Note:** Admins can only update OTHER users' basic info, not their own"
                            },
                            "response": []
                        },
                        {
                            "name": "Delete User",
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users/{{userId}}",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "{{userId}}"
                                    ]
                                },
                                "description": "Delete a user account. Admin or SuperAdmin access required.\n\n**Authentication:** Bearer token required\n**Role Required:** Admin or SuperAdmin\n\n**URL Parameters:**\n- userId: MongoDB ObjectId of the user to delete"
                            },
                            "response": []
                        }
                    ],
                    "description": "Admin-only endpoints for managing users"
                },
                {
                    "name": "Role Management",
                    "item": [
                        {
                            "name": "Change User Role (Admin -> Promote User)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Log role change",
                                            "if (pm.response.code === 200) {",
                                            "    const response = pm.response.json();",
                                            "    console.log('✅ Role changed successfully');",
                                            "    console.log('New role:', response.data.role);",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"role\": \"admin\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/{{userId}}/role",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "{{userId}}",
                                        "role"
                                    ]
                                },
                                "description": "Change a user's role. **Admin can ONLY promote user → admin**\n\n**Authentication:** Bearer token required\n**Role Required:** Admin or SuperAdmin\n\n**Admin Permissions:**\n- ✅ Can promote: user → admin\n- ❌ Cannot demote: admin → user\n- ❌ Cannot change: superadmin role\n- ❌ Cannot change: own role\n- ❌ Cannot change: another admin's role\n\n**Required fields:**\n- role: 'user', 'admin', or 'superadmin'\n\n**Example (Admin promoting user):**\n```json\n{\n  \"role\": \"admin\"\n}\n```\n\n**Note:** This will FAIL if admin tries to demote another admin"
                            },
                            "response": []
                        },
                        {
                            "name": "Change User Role (SuperAdmin -> Full Control)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Log role change",
                                            "if (pm.response.code === 200) {",
                                            "    const response = pm.response.json();",
                                            "    console.log('✅ Role changed successfully by SuperAdmin');",
                                            "    console.log('New role:', response.data.role);",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"role\": \"user\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/{{userId}}/role",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "{{userId}}",
                                        "role"
                                    ]
                                },
                                "description": "Change a user's role. **SuperAdmin has full control over user ↔ admin**\n\n**Authentication:** Bearer token required\n**Role Required:** SuperAdmin\n\n**SuperAdmin Permissions:**\n- ✅ Can promote: user → admin\n- ✅ Can demote: admin → user\n- ✅ Full control: admin ↔ user (bidirectional)\n- ❌ Cannot change: another superadmin's role\n- ❌ Cannot change: own role\n\n**Required fields:**\n- role: 'user', 'admin', or 'superadmin'\n\n**Example (SuperAdmin demoting admin):**\n```json\n{\n  \"role\": \"user\"\n}\n```\n\n**Note:** Only SuperAdmin can demote admin → user"
                            },
                            "response": []
                        },
                        {
                            "name": "Try Change Own Role (Should Fail)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// This should fail with 403",
                                            "pm.test('Should fail with 403 Forbidden', function () {",
                                            "    pm.response.to.have.status(403);",
                                            "});",
                                            "",
                                            "pm.test('Should have correct error message', function () {",
                                            "    const response = pm.response.json();",
                                            "    pm.expect(response.message).to.include('cannot change your own role');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{accessToken}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"role\": \"superadmin\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/{{userId}}/role",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "{{userId}}",
                                        "role"
                                    ]
                                },
                                "description": "**Test Case:** Try to change your own role (should fail with 403)\n\n**Expected Response:**\n```json\n{\n  \"success\": false,\n  \"message\": \"You cannot change your own role\"\n}\n```\n\n**Security Rule:** No user can escalate their own privileges"
                            },
                            "response": []
                        }
                    ],
                    "description": "Role management endpoints with strict business logic"
                }
            ],
            "description": "User management endpoints for CRUD operations and role management"
        },
        {
            "name": "Health Check",
            "item": [
                {
                    "name": "API Health",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                ""
                            ]
                        },
                        "description": "Check if the API is running and healthy. No authentication required."
                    },
                    "response": []
                },
                {
                    "name": "API Routes Health",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}",
                            "host": [
                                "{{baseUrl}}"
                            ]
                        },
                        "description": "Alternative health check endpoint. No authentication required."
                    },
                    "response": []
                }
            ],
            "description": "Health check endpoints to verify API availability"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Log the request",
                    "console.log('🚀 Request:', pm.request.method, pm.request.url.toString());"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Log the response status",
                    "const statusCode = pm.response.code;",
                    "const statusText = pm.response.status;",
                    "",
                    "if (statusCode >= 200 && statusCode < 300) {",
                    "    console.log('✅ Success:', statusCode, statusText);",
                    "} else if (statusCode >= 400 && statusCode < 500) {",
                    "    console.log('⚠️ Client Error:', statusCode, statusText);",
                    "} else if (statusCode >= 500) {",
                    "    console.log('❌ Server Error:', statusCode, statusText);",
                    "}",
                    "",
                    "// Pretty print response",
                    "try {",
                    "    const response = pm.response.json();",
                    "    console.log('📦 Response:', JSON.stringify(response, null, 2));",
                    "} catch (e) {",
                    "    console.log('📦 Response:', pm.response.text());",
                    "}"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:5000/api",
            "type": "string"
        },
        {
            "key": "accessToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "refreshToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "userId",
            "value": "",
            "type": "string"
        },
        {
            "key": "signup_email",
            "value": "",
            "type": "string"
        },
        {
            "key": "reset_email",
            "value": "",
            "type": "string"
        },
        {
            "key": "new_email",
            "value": "",
            "type": "string"
        }
    ]
}